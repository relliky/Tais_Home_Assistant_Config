# Lovelace
browser_mod:

# Pyscript message severity level
logger:
  default: error
  logs:
    custom_components.pyscript: info
    custom_components.pyscript.file.my_scripts.z_alexa_set_tv_brightness: debug    
    
    
# System Sensors
sensor:
  # This sensor capture DNS public IP
  - platform: dnsip
    name: Public IP
    
  # System resource 
  - platform: systemmonitor
    resources:
      - type: disk_use
        arg: /
      - type: memory_use
      - type: memory_free
      - type: swap_use
      - type: swap_free      
      - type: load_1m
      - type: processor_use 
      - type: processor_temperature

shell_command:
  reboot_u6_lite: bash /config/shell_scripts/reboot_u6_lite.sh
  reboot_udm:     bash /config/shell_scripts/reboot_udm.sh
  
#  # CPU Clock Frequency
#  - platform: command_line
#    name: "CPU Clock Frequency"
#    command: 'cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq'
#    unit_of_measurement: 'MHz'
#    value_template: '{{ value | multiply(0.001) }}'
#  
#  # Uptime
#  - platform: uptime
#    name: Boot Time
#  - platform: template
#    sensors:
#      uptime:
#        friendly_name: "Uptime"
#        value_template: >-
#          {% set t = now() %}
#          {{ relative_time(strptime(states('sensor.boot_time'), '%Y-%m-%dT%H:%M:%S.%f%z')) }}

  # Bad Login Attempts
#  - platform: command_line
#    name: badlogin
#    command: "grep -c 'Login attempt' /home/hass/.homeassistant/home-assistant.log"
  
  # QNAP NAS
#  - platform: qnap
#    host: 192.168.1.11
#    username: admin
#    password: admin
#    monitored_conditions:
#      - status
#      - cpu_usage
#      - memory_percent_used
#      - network_tx
#      - volume_percentage_used
#      - volume_size_free
    
# Remote Acccess via HTTPS
http:
  ssl_certificate: /ssl/fullchain.pem
  ssl_key: /ssl/privkey.pem
  ip_ban_enabled: true
  login_attempts_threshold: 10

# Main DDNS - DuckDNS (if auto-renew fails, needs to mannually renew every 3 months)
# Alt. DDNS - FreeDNS (no need to renew mannually)
freedns:
  url: !secret freedns_token_url

# No-IP discarded as it requires to manually renew every month
#no_ip:
#  domain:   !secret no_ip_url
#  username: !secret no_ip_account
#  password: !secret no_ip_password

  
# Database logging config
recorder:
  purge_keep_days: 3
  auto_purge: true
  commit_interval: 3 # updates log every 3s
  #db_url: mysql://hass_user:hass_pass@core-mariadb/homeassistant?charset=utf8mb4
  
  
# PVE monitor
proxmoxve:
  - host: 192.168.1.7
    username: root
    password: !secret pve_password
    verify_ssl: false
    nodes:
      - node: pve
        vms:
          - 100
        containers:
          - 101
          - 102
  
# WOL switch on PCs
switch:
  - platform: wake_on_lan
    mac: b8:88:e3:33:cf:17
    name: Old Laptop
    host: 192.168.1.5

  - platform: wake_on_lan
    mac: 40:B0:76:D8:A9:DC
    name: Gaming PC
    host: 192.168.1.9
    turn_off:
      service: hassio.addon_stdin
      data:
        addon: core_rpc_shutdown
        input: gaming_pc
        
  - platform: wake_on_lan
    mac: b8:ae:ed:75:d8:b7
    name: Intel NUC
    host: 192.168.1.7

binary_sensor:
  - platform: ping
    host: 192.168.1.20
    name: Kes Work Laptop

#  - platform: ping
#    mac: 24:5E:BE:09:3D:E0
#    name: QNAP NAS
#    host: 192.168.1.11

input_number:
  gaming_pc_shutdown_timer_in_hour:
    name: Gaming PC Shutdown Timer In Hour
    min: 1
    max: 24
    step: 1

input_datetime:
  log_disable_time:
    name: "Log Disable Time"
    has_date: true
    has_time: true
    
timer:
  gaming_pc_shutdown_timer:
    name: "Gaming PC Shutdown Timer"
    duration: "02:00:00"
###############################################
#
# Scripts
#
###############################################
script:
  hassio_restart:
    alias: Restart Home Assistant
    sequence:
      - service: homeassistant.restart



automation:
  # - Starts Log Enable and set timeout
  - alias: Enable/Disable Logging By The State of The Log Enable and Set Timeout for 48 Hours
    id: "1607918439986"
    trigger:
      - platform: state
        entity_id: input_boolean.log_enable
        to:
          - "on"
          - "off"
    action:
      - service: >
          {% if states('input_boolean.log_enable') == 'on' %}
            recorder.enable
          {% else %}
            recorder.disable
          {% endif %}
      # Reset the Timer          
      - service: input_datetime.set_datetime
        entity_id: input_datetime.log_disable_time
        data_template:
          datetime: "{{ (now().timestamp())| timestamp_custom('%Y-%m-%d %H:%M:%S', true) }}"
      # IF log_enable is ON 
      - condition: state
        entity_id: input_boolean.log_enable
        state: "on"
      # Make the timeout to 1 day later
      - service: input_datetime.set_datetime
        entity_id: input_datetime.log_disable_time
        data_template:
          datetime: "{{ (now().timestamp() + 60*60*24)| timestamp_custom('%Y-%m-%d %H:%M:%S', true) }}"

  - alias: Turn Off Logging By The Timeout
    id: "1607918439987"
    trigger:
      - platform: time_pattern
        minutes: "/5"
    action:
      # Time condition does not work with input_datetime so have to use template to work aorund
      - condition: template
        value_template: "{{now().timestamp() > state_attr('input_datetime.log_disable_time', 'timestamp')}}"
      - service: input_boolean.turn_off
        entity_id: input_boolean.log_enable
      - service: recorder.disable


  - alias: Start the Gaming PC Timer When it is turned on
    id: automation.start_the_gaming_pc_timer_when_it_is_turned_on
    trigger:
      - platform: state
        entity_id: switch.gaming_pc
        from: "off"
        to: "on"
    action:
      - service: timer.start
        entity_id: timer.gaming_pc_shutdown_timer
        data:
          duration: "05:00:00"

  - alias: Turn Off Gaming PC By The Timeout
    id: automation.turn_off_gaming_pc_by_the_timeout
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.gaming_pc_shutdown_timer
    action:
      - service: switch.turn_off
        entity_id: switch.gaming_pc
        
        
